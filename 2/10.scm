(define (new-mul-interval x y)
  (let ((xl (lower-bound x))
	(xu (upper-bound x))
        (yl (lower-bound y))
	(yu (upper-bound y)))
    (cond ((< xu 0) (cond ((< yu 0) (make-interval (* xu yu) (* xl yl)))
			  ((< yl 0) (make-interval (* xl yu) (* xl yl)))
			  (else     (make-interval (* xl yu) (* xu yl)))))
	  ((< xl 0) (cond ((< yu 0) (make-interval (* xu yl) (* xl yl)))
			  ((< yl 0) (make-interval (min (* xl yu) (* xu yl)) 
						   (max (* xl yl) (* xu yu))))
			  (else     (make-interval (* xl yu) (* xu yu)))))
	  (else (cond ((< yu 0) (make-interval (* xu yl) (* xl yu)))
		      ((< yl 0) (make-interval (* xu yl) (* xu yu)))
		      (else     (make-interval (* xl yl) (* xu yu))))))))

(define (new-div-interval x y)
  (let ((yl (lower-bound y))
	(yu (upper-bound y)))
    (if (and (< yl 0) (< 0 yu))
        (error "divisor interval spans zero" yl yu)
        (mul-interval x
                      (make-interval (/ 1.0 yu) (/ 1.0 yl))))))
