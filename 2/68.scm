(define (encode message tree)
  (if (null? message)
      '()
      (append (encode-symbol (car message) tree)
	      (encode (cdr message) tree))))

(define (encode-symbol symbol tree)
  (if (leaf? tree) '()
      (let ((lb (left-branch tree))
	    (rb (right-branch tree)))
	(cond ((element-of-set? symbol (symbols lb))
	       (cons 0 (encode-symbol symbol lb)))
	      ((element-of-set? symbol (symbols rb))
	       (cons 1 (encode-symbol symbol rb)))
	      (else (error "oops! something went wrong -- encode" symbol))))))

; (add-load-path "." :relaitve)
; (load "67.scm")
; (encode '(A D A B B C A) sample-tree) -> (0 1 1 0 0 1 0 1 0 1 1 1 0)
